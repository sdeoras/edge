// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snapshot.proto

package snapshot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Data consists of a tag which is used for folder name on google storage
// and data bytes consisting of snapshot image
type Data struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_snapshot_8aaf393814030a74, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Server sends acknowledgement as number of bytes written
type Ack struct {
	N                    int64    `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_snapshot_8aaf393814030a74, []int{1}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (dst *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(dst, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func init() {
	proto.RegisterType((*Data)(nil), "snapshot.Data")
	proto.RegisterType((*Ack)(nil), "snapshot.Ack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnapshotClient is the client API for Snapshot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnapshotClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Snapshot_SendClient, error)
}

type snapshotClient struct {
	cc *grpc.ClientConn
}

func NewSnapshotClient(cc *grpc.ClientConn) SnapshotClient {
	return &snapshotClient{cc}
}

func (c *snapshotClient) Send(ctx context.Context, opts ...grpc.CallOption) (Snapshot_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Snapshot_serviceDesc.Streams[0], "/snapshot.Snapshot/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &snapshotSendClient{stream}
	return x, nil
}

type Snapshot_SendClient interface {
	Send(*Data) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type snapshotSendClient struct {
	grpc.ClientStream
}

func (x *snapshotSendClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *snapshotSendClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnapshotServer is the server API for Snapshot service.
type SnapshotServer interface {
	Send(Snapshot_SendServer) error
}

func RegisterSnapshotServer(s *grpc.Server, srv SnapshotServer) {
	s.RegisterService(&_Snapshot_serviceDesc, srv)
}

func _Snapshot_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SnapshotServer).Send(&snapshotSendServer{stream})
}

type Snapshot_SendServer interface {
	SendAndClose(*Ack) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type snapshotSendServer struct {
	grpc.ServerStream
}

func (x *snapshotSendServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *snapshotSendServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Snapshot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snapshot.Snapshot",
	HandlerType: (*SnapshotServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Snapshot_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "snapshot.proto",
}

func init() { proto.RegisterFile("snapshot.proto", fileDescriptor_snapshot_8aaf393814030a74) }

var fileDescriptor_snapshot_8aaf393814030a74 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xce, 0x4b, 0x2c,
	0x28, 0xce, 0xc8, 0x2f, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x74,
	0xb8, 0x58, 0x5c, 0x12, 0x4b, 0x12, 0x85, 0x04, 0xb8, 0x98, 0x4b, 0x12, 0xd3, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x21, 0x2e, 0x96, 0x94, 0xc4, 0x92, 0x44, 0x09, 0x26,
	0x05, 0x46, 0x0d, 0x9e, 0x20, 0x30, 0x5b, 0x49, 0x98, 0x8b, 0xd9, 0x31, 0x39, 0x5b, 0x88, 0x87,
	0x8b, 0x31, 0x0f, 0xac, 0x94, 0x39, 0x88, 0x31, 0xcf, 0xc8, 0x94, 0x8b, 0x23, 0x18, 0x6a, 0x9c,
	0x90, 0x26, 0x17, 0x4b, 0x70, 0x6a, 0x5e, 0x8a, 0x10, 0x9f, 0x1e, 0xdc, 0x46, 0x90, 0xf1, 0x52,
	0xbc, 0x08, 0xbe, 0x63, 0x72, 0xb6, 0x12, 0x83, 0x06, 0x63, 0x12, 0x1b, 0xd8, 0x29, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x88, 0x0e, 0x4e, 0x9c, 0x00, 0x00, 0x00,
}
