// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inception.proto

package inception

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Data consists of a tag which is used for folder name on google storage
// and data bytes consisting of snapshot image
type Data struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_inception_fcd6b55b7fbf8a22, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Server sends acknowledgement
type Ack struct {
	N                    int64    `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	TopLabel             string   `protobuf:"bytes,2,opt,name=topLabel,proto3" json:"topLabel,omitempty"`
	Label                []*Label `protobuf:"bytes,3,rep,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_inception_fcd6b55b7fbf8a22, []int{1}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (dst *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(dst, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *Ack) GetTopLabel() string {
	if m != nil {
		return m.TopLabel
	}
	return ""
}

func (m *Ack) GetLabel() []*Label {
	if m != nil {
		return m.Label
	}
	return nil
}

// label contains label string and a probability
type Label struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Probability          int64    `protobuf:"varint,2,opt,name=probability,proto3" json:"probability,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Label) Reset()         { *m = Label{} }
func (m *Label) String() string { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()    {}
func (*Label) Descriptor() ([]byte, []int) {
	return fileDescriptor_inception_fcd6b55b7fbf8a22, []int{2}
}
func (m *Label) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Label.Unmarshal(m, b)
}
func (m *Label) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Label.Marshal(b, m, deterministic)
}
func (dst *Label) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Label.Merge(dst, src)
}
func (m *Label) XXX_Size() int {
	return xxx_messageInfo_Label.Size(m)
}
func (m *Label) XXX_DiscardUnknown() {
	xxx_messageInfo_Label.DiscardUnknown(m)
}

var xxx_messageInfo_Label proto.InternalMessageInfo

func (m *Label) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Label) GetProbability() int64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func init() {
	proto.RegisterType((*Data)(nil), "inception.Data")
	proto.RegisterType((*Ack)(nil), "inception.Ack")
	proto.RegisterType((*Label)(nil), "inception.Label")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InceptionClient is the client API for Inception service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InceptionClient interface {
	Query(ctx context.Context, opts ...grpc.CallOption) (Inception_QueryClient, error)
}

type inceptionClient struct {
	cc *grpc.ClientConn
}

func NewInceptionClient(cc *grpc.ClientConn) InceptionClient {
	return &inceptionClient{cc}
}

func (c *inceptionClient) Query(ctx context.Context, opts ...grpc.CallOption) (Inception_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Inception_serviceDesc.Streams[0], "/inception.Inception/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &inceptionQueryClient{stream}
	return x, nil
}

type Inception_QueryClient interface {
	Send(*Data) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type inceptionQueryClient struct {
	grpc.ClientStream
}

func (x *inceptionQueryClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *inceptionQueryClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InceptionServer is the server API for Inception service.
type InceptionServer interface {
	Query(Inception_QueryServer) error
}

func RegisterInceptionServer(s *grpc.Server, srv InceptionServer) {
	s.RegisterService(&_Inception_serviceDesc, srv)
}

func _Inception_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InceptionServer).Query(&inceptionQueryServer{stream})
}

type Inception_QueryServer interface {
	SendAndClose(*Ack) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type inceptionQueryServer struct {
	grpc.ServerStream
}

func (x *inceptionQueryServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *inceptionQueryServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Inception_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inception.Inception",
	HandlerType: (*InceptionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _Inception_Query_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "inception.proto",
}

func init() { proto.RegisterFile("inception.proto", fileDescriptor_inception_fcd6b55b7fbf8a22) }

var fileDescriptor_inception_fcd6b55b7fbf8a22 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0xbf, 0x4b, 0xc4, 0x30,
	0x14, 0x36, 0xe6, 0x2a, 0xe6, 0xdd, 0xe1, 0x1d, 0x0f, 0x87, 0xa3, 0x53, 0xc8, 0x20, 0x19, 0x4a,
	0x87, 0x3a, 0x39, 0x49, 0xc1, 0x45, 0x70, 0x31, 0x8b, 0x73, 0x52, 0x8b, 0x84, 0x96, 0x24, 0x94,
	0x38, 0xf4, 0xbf, 0x97, 0x26, 0xb4, 0x76, 0x7b, 0xef, 0xfb, 0x91, 0xef, 0xcb, 0x83, 0xb3, 0x75,
	0x5d, 0x1f, 0xa2, 0xf5, 0xae, 0x0e, 0x93, 0x8f, 0x1e, 0xd9, 0x06, 0x88, 0x0a, 0x0e, 0x6f, 0x3a,
	0x6a, 0xbc, 0x00, 0x8d, 0xfa, 0xe7, 0x4a, 0x38, 0x91, 0x4c, 0x2d, 0x23, 0x22, 0x1c, 0xbe, 0x75,
	0xd4, 0xd7, 0x5b, 0x4e, 0xe4, 0x49, 0xa5, 0x59, 0x7c, 0x01, 0x6d, 0xbb, 0x01, 0x4f, 0x40, 0x5c,
	0x92, 0x52, 0x45, 0x1c, 0x96, 0x70, 0x1f, 0x7d, 0xf8, 0xd0, 0xa6, 0x1f, 0x93, 0x98, 0xa9, 0x6d,
	0xc7, 0x27, 0x28, 0xc6, 0x44, 0x50, 0x4e, 0xe5, 0xb1, 0xb9, 0xd4, 0xff, 0x55, 0x92, 0x40, 0x65,
	0x5a, 0xbc, 0x42, 0x91, 0x0d, 0x8f, 0xab, 0x21, 0x37, 0xc9, 0x0b, 0x72, 0x38, 0x86, 0xc9, 0x1b,
	0x6d, 0xec, 0x68, 0xe3, 0x9c, 0x52, 0xa8, 0xda, 0x43, 0xcd, 0x0b, 0xb0, 0xf7, 0xf5, 0x69, 0xac,
	0xa0, 0xf8, 0xfc, 0xed, 0xa7, 0x19, 0xcf, 0xbb, 0xbc, 0xe5, 0x9b, 0xe5, 0xc3, 0x0e, 0x68, 0xbb,
	0x41, 0xdc, 0x48, 0x62, 0xee, 0xd2, 0x51, 0x9e, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x11, 0xe7,
	0x20, 0xf5, 0x27, 0x01, 0x00, 0x00,
}
